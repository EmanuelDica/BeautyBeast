@page "/"
@inject Services.UserService UserService
@inject Services.AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<Redirect> Logger
@rendermode InteractiveServer

<div class="container mt-4">
    <p>Loading...</p>
</div>

@code {
    private bool _hasRedirected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasRedirected)
        {
            try
            {
                var user = await UserService.GetCurrentUserAsync();
                var role = await UserService.GetUserRoleAsync();

                if (user != null && !string.IsNullOrEmpty(role))
                {
                    Logger.LogInformation("Redirecting: {Role}, {Id}", role, user.Id);
                    if (role == "Artist")
                        NavigationManager.NavigateTo($"/dashboard/artist/{user.Id}");
                    else if (role == "Client")
                        NavigationManager.NavigateTo($"/dashboard/client/{user.Id}");
                    else
                        NavigationManager.NavigateTo("/account/signin");
                }
                else
                {
                    NavigationManager.NavigateTo("/account/signin");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Redirect failed");
                NavigationManager.NavigateTo("/account/signin");
            }

            _hasRedirected = true;
            StateHasChanged();
        }
    }
}
