@page "/artists/profile/treatments"
@inject NavigationManager NavigationManager
@inject Services.TreatmentService TreatmentService
@inject Services.UserService UserService
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h2>Your Treatments</h2>
        <button class="btn btn-success" @onclick="NavigateToCreateTreatment">âž• Create Treatment</button>
    </div>

    @if (treatments == null)
    {
        <div class="alert alert-info mt-3">Loading treatments...</div>
    }
    else if (!treatments.Any())
    {
        <div class="alert alert-warning mt-3">No treatments found.</div>
    }
    else
    {
        <div class="list-group mt-3">
            @foreach (var treatment in treatments)
            {
                <div class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5>@treatment.Name</h5>
                            <p>@treatment.Description</p>
                            <p>
                                <small>
                                    Booking Date: @treatment.BookingDate.ToShortDateString(),
                                    Start: @treatment.StartTime.ToString("hh\\:mm"),
                                    Duration: @treatment.Duration.ToString("hh\\:mm")
                                </small>
                            </p>
                        </div>
                        <div>
                            <button class="btn btn-primary me-2" @onclick="@(() => EditTreatment(treatment.Id))">Edit</button>
                            <button class="btn btn-danger" @onclick="@(() => DeleteTreatment(treatment.Id))">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<TreatmentDto>? treatments;
    private int artistId;

    protected override async Task OnInitializedAsync()
    {
        // Retrieve current user (artist) to get their ID
        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            // If no user is found, you might redirect to login
            NavigationManager.NavigateTo("/login");
            return;
        }

        artistId = currentUser.Id; // Assuming the current user is the artist

        // Retrieve all treatments and filter by current artist's ID
        var allTreatments = await TreatmentService.GetAllTreatmentsAsync();
        treatments = allTreatments.Where(t => t.ArtistId == artistId).ToList();
    }

    private void NavigateToCreateTreatment()
    {
        NavigationManager.NavigateTo("/artists/profile/treatments/create");
    }

    private void EditTreatment(int treatmentId)
    {
        NavigationManager.NavigateTo($"/artists/profile/treatments/edit/{treatmentId}");
    }

    private async Task DeleteTreatment(int treatmentId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this treatment?");
        if (confirmed)
        {
            bool result = await TreatmentService.DeleteTreatmentAsync(treatmentId);
            if (result && treatments != null)
            {
                treatments.RemoveAll(t => t.Id == treatmentId);
            }
        }
    }
}