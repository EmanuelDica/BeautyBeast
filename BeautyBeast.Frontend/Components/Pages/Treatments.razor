@page "/account/{id:int}/treatments"
@inject NavigationManager NavigationManager
@inject Services.TreatmentService TreatmentService
@inject Services.UserService UserService
@inject IJSRuntime JSRuntime
@using BeautyBeast.Frontend.Components
@rendermode InteractiveServer

<div class="container mt-4">
    @if (user == null)
    {
        <div class="alert alert-info mt-3">Loading treatments...</div>
    }
    else if (userRole != "Artist")
    {
        <div class="alert alert-danger mt-3">Access denied. Only artists can manage treatments.</div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center">
            <h2>Your Treatments</h2>
            <button class="btn btn-success" @onclick="NavigateToCreateTreatment">âž• Create Treatment</button>
        </div>

        @if (treatments == null)
        {
            <div class="alert alert-info mt-3">Loading treatments...</div>
        }
        else if (!treatments.Any())
        {
            <div class="alert alert-warning mt-3">No treatments found.</div>
        }
        else
        {
            @foreach (var treatment in treatments)
            {
                <div class="mb-3">
                    <FeedItem 
                        Poster="user!" 
                        Content="@(treatment.Name + " - " + treatment.Description + Environment.NewLine +
                                  "Booking Date: " + treatment.BookingDate.ToShortDateString() + 
                                  ", Start: " + treatment.StartTime.ToString("hh\\:mm") + 
                                  ", Duration: " + treatment.Duration.ToString("hh\\:mm"))"
                        Comments="new List<CommentDto>()" />

                    <div class="mt-2">
                        <button class="btn btn-primary me-2" @onclick="() => EditTreatment(treatment.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTreatment(treatment.Id)">Delete</button>
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private List<TreatmentDto>? treatments;
    private UserDto? user;
    private string? userRole;
    private int artistId;

    protected override async Task OnInitializedAsync()
    {
        // Get current user and role.
        user = await UserService.GetCurrentUserAsync();
        userRole = await UserService.GetUserRoleAsync();

        // If no user or role isn't "Artist", redirect to unauthorized.
        if (string.IsNullOrEmpty(userRole) || userRole != "Artist")
        {
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }

        artistId = user?.Id ?? 0;
        var allTreatments = await TreatmentService.GetAllTreatmentsAsync();
        treatments = allTreatments.Where(t => t.ArtistId == artistId).ToList();
    }

    private void NavigateToCreateTreatment()
    {
        // Navigate using the route parameter id.
        NavigationManager.NavigateTo($"/account/{id}/treatments/create");
    }

    private void EditTreatment(int treatmentId)
    {
        // Navigate to the edit page using the route parameter id.
        NavigationManager.NavigateTo($"/account/{id}/treatments/edit/{treatmentId}");
    }

    private async Task DeleteTreatment(int treatmentId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this treatment?");
        if (confirmed)
        {
            bool result = await TreatmentService.DeleteTreatmentAsync(treatmentId);
            if (result)
            {
                // Remove from the list and refresh the page.
                treatments?.RemoveAll(t => t.Id == treatmentId);
                NavigationManager.NavigateTo($"/account/{id}/treatments", forceLoad: true);
            }
        }
    }
}