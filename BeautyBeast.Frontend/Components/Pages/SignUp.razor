@page "/account/signup"
@layout Layout.BlankLayout
@using System.Text.RegularExpressions
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using System.ComponentModel.DataAnnotations
@using BeautyBeast.Frontend.Services
@using BeautyBeast.Frontend.Dtos
@inject ArtistService ArtistService
@inject ClientService ClientService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-7">
            <div class="card shadow p-4">
                <h4 class="text-center mb-3">Create an Account</h4>
                <form @onsubmit="RegisterUser">
                    <!-- First Name -->
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <input type="text" class="form-control @(firstNameValid ? "is-valid" : firstNameError != null ? "is-invalid" : "")"
                               id="firstName" @bind="FirstName" @oninput="() => ValidateFields()" required>
                        <div class="invalid-feedback">@firstNameError</div>
                    </div>

                    <!-- Last Name -->
                    <div class="mb-3">
                        <label for="surname" class="form-label">Last Name</label>
                        <input type="text" class="form-control @(surnameValid ? "is-valid" : surnameError != null ? "is-invalid" : "")"
                               id="surname" @bind="Surname" @oninput="() => ValidateFields()" required>
                        <div class="invalid-feedback">@surnameError</div>
                    </div>

                    <!-- Email -->
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control @(emailValid ? "is-valid" : emailError != null ? "is-invalid" : "")"
                               id="email" @bind="Email" @oninput="() => ValidateFields()" required>
                        <div class="invalid-feedback">@emailError</div>
                    </div>

                    <!-- Password -->
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control @(passwordValid ? "is-valid" : passwordError != null ? "is-invalid" : "")"
                               id="password" @bind="Password" @oninput="() => ValidateFields()" required>
                        <div class="invalid-feedback">@passwordError</div>
                    </div>

                    <!-- Account Type Selection using a select element -->
                    <div class="mb-3">
                        <label class="form-label">Account Type</label>
                        <select class="form-select" @bind="SelectedAccountType">
                            <option value="clientuser">Client</option>
                            <option value="artistuser">Professional</option>
                        </select>
                    </div>

                    <!-- Bio (Only for Artists) -->
                    @if (SelectedAccountType == "artistuser")
                    {
                        <div class="mb-3">
                            <label for="bio" class="form-label">Bio</label>
                            <textarea class="form-control" id="bio" rows="3" placeholder="Tell us about your expertise..."
                                      @bind="Bio" @oninput="() => ValidateFields()"></textarea>
                        </div>
                    }

                    <!-- Register Button -->
                    <button type="submit" class="btn btn-primary w-100" disabled="@(!success)">Register</button>
                </form>
            </div>

            <div class="mt-3 text-center">
                <span>Already have an account?</span>
                <a href="/account/signin" class="btn btn-link">Sign In</a>
            </div>

            @if (errors.Length > 0)
            {
                <div class="alert alert-danger mt-3">
                    @foreach (var error in errors)
                    {
                        <p class="mb-0">@error</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool success;
    private string[] errors = { };

    private string FirstName { get; set; } = string.Empty;
    private string Surname { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string Bio { get; set; } = string.Empty;
    // If you have a terms checkbox, uncomment and use:
    // private bool AcceptedTerms = false;

    // Backing field for SelectedAccountType with default value.
    private string selectedAccountType = "clientuser";
    public string SelectedAccountType
    {
        get => selectedAccountType;
        set
        {
            selectedAccountType = value;
            ValidateFields();
        }
    }

    // Field-level validation variables.
    private bool firstNameValid = false;
    private string? firstNameError;
    private bool surnameValid = false;
    private string? surnameError;
    private bool emailValid = false;
    private string? emailError;
    private bool passwordValid = false;
    private string? passwordError;

    private async Task RegisterUser()
    {
        errors = new string[] { };
        ValidateFields();

        if (!success)
        {
            errors = new[] { "Please correct the errors in the form." };
            return;
        }

        try
        {
            if (SelectedAccountType == "artistuser")
            {
                var createArtistDto = new CreateArtistDto($"{FirstName} {Surname}", Email, "Artist", Password, null);
                var thisArtist = await ArtistService.CreateArtistAsync(createArtistDto);

                if (thisArtist != null)
                {
                    await LocalStorage.SetItemAsync("userId", thisArtist.Id);
                    await LocalStorage.SetItemAsync("userRole", "Artist");
                    NavigationManager.NavigateTo($"/dashboard/artist/{thisArtist.Id}");
                }
                else
                {
                    errors = new[] { "Failed to create artist account." };
                }
            }
            else if (SelectedAccountType == "clientuser")
            {
                var createClientDto = new CreateClientDto($"{FirstName} {Surname}", Email, null, Password, "Client");
                var thisClient = await ClientService.CreateClientAsync(createClientDto);
                

                if (thisClient != null)
                {
                    await LocalStorage.SetItemAsync("userId", thisClient.Id);
                    await LocalStorage.SetItemAsync("userRole", "Client");
                    NavigationManager.NavigateTo($"/dashboard/client/{thisClient.Id}");
                }
                else
                {
                    errors = new[] { "Failed to create client account." };
                }
            }

            // Navigate to sign in after registration.
            ResetForm();
        }
        catch (Exception ex)
        {
            errors = new[] { $"An error occurred: {ex.Message}" };
        }
    }

    private void ValidateFields()
    {
        firstNameValid = !string.IsNullOrWhiteSpace(FirstName);
        firstNameError = firstNameValid ? null : "First name is required";

        surnameValid = !string.IsNullOrWhiteSpace(Surname);
        surnameError = surnameValid ? null : "Last name is required";

        emailValid = new EmailAddressAttribute().IsValid(Email);
        emailError = emailValid ? null : "The email address is invalid";

        passwordValid = !string.IsNullOrWhiteSpace(Password);
        passwordError = passwordValid ? null : "Password is required";

        success = firstNameValid && surnameValid && emailValid && passwordValid;
    }

    private void ResetForm()
    {
        FirstName = "";
        Surname = "";
        Email = "";
        Password = "";
        SelectedAccountType = "clientuser";
        Bio = "";
        success = false;
    }
}