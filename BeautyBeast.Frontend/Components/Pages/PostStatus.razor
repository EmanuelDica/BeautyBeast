@page "/account/{id:int}/post/status"
@inject Services.StatusService StatusService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h2>‚úç Create Status Post</h2>

<textarea class="form-control mb-3" placeholder="Write your status..." rows="4" @bind="StatusText"></textarea>

<div class="mb-3">
    <button class="btn btn-outline-success me-2" @onclick="LikeStatus">Like (@LikesCount)</button>
    <button class="btn btn-outline-info" @onclick="CommentStatus">Comment</button>
</div>

<button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
<button class="btn btn-primary" @onclick="Submit">Post</button>


@code {
    [Parameter] public int id { get; set; } // User/account id from the route.
    private string StatusText = string.Empty;
    private int LastPostedStatusId = 0;
    private int LikesCount = 0;

    private async Task Submit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(StatusText))
            {
                Console.WriteLine("Status cannot be empty.");
                return;
            }

            var newStatus = new CreateStatusDto(StatusText, id);
            var result = await StatusService.CreateStatusAsync(newStatus);

            Console.WriteLine($"[SUBMIT] CreateStatus result: {result}");

            if (result)
            {
                Console.WriteLine("Status posted successfully.");
                LastPostedStatusId = await GetLastPostedStatusId();
                NavigationManager.NavigateTo($"/account/{id}/post/status");
            }
            else
            {
                Console.WriteLine("Failed to post status.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Exception posting status: {ex.Message}");
        }
    }

    private void Cancel()
    {
        // Navigate back to the status page for the current account.
        NavigationManager.NavigateTo($"/account/{id}/post/status");
    }

    private async Task<int> GetLastPostedStatusId()
    {
        var statuses = await StatusService.GetAllStatusesAsync();
        return statuses.OrderByDescending(s => s.DatePosted).FirstOrDefault()?.Id ?? 0;
    }

    // Optional: Implement like and comment functionality (for now they just log output)
    private async Task LikeStatus()
    {
        LikesCount++;
        Console.WriteLine($"Likes incremented: {LikesCount}");
        await Task.CompletedTask;
    }

    private void CommentStatus()
    {
        Console.WriteLine("Comment button clicked (functionality not implemented).");
    }
}