@page "/users/post/status"
@inject Services.StatusService StatusService
@inject NavigationManager NavigationManager

<h2>✍ Create Status Post</h2>

<textarea class="form-control mb-3" placeholder="Write your status..." rows="4" @bind="StatusText"></textarea>

<button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
<button class="btn btn-primary" @onclick="Submit">Post</button>

@if (LastPostedStatusId > 0)
{
    <button class="btn btn-outline-primary mt-3" @onclick="() => EditStatus(LastPostedStatusId)">
        ✏ Edit Last Status
    </button>
}

@code {
    private string StatusText = string.Empty;
    private int UserId = 1; // Replace with actual user ID
    private int LastPostedStatusId = 0;

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(StatusText))
        {
            Console.WriteLine("Status cannot be empty.");
            return;
        }

        var newStatus = new CreateStatusDto(StatusText, UserId);
        var result = await StatusService.CreateStatusAsync(newStatus);

        if (result)
        {
            Console.WriteLine("Status posted successfully.");
            LastPostedStatusId = await GetLastPostedStatusId(); // Retrieve the last posted status ID
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Failed to post status.");
        }
    }

    private void EditStatus(int statusId)
    {
        NavigationManager.NavigateTo($"/users/status/edit/{statusId}");
    }

    private async Task<int> GetLastPostedStatusId()
    {
        var statuses = await StatusService.GetAllStatusesAsync();
        return statuses.OrderByDescending(s => s.DatePosted).FirstOrDefault()?.Id ?? 0;
    }
}