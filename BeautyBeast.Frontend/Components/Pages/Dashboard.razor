@page "/dashboard/artist/{id:int}"
@using BeautyBeast.Frontend.Dtos
@using BeautyBeast.Frontend.Components
@inject Services.PostService PostsService
@inject Services.StatusService StatusService
@rendermode InteractiveServer

<div class="container mt-4">
    <h5 class="mb-3">Dashboard</h5>

    @if (posts == null || statuses == null)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        <div>
            <h6>Posts</h6>
            @if (posts.Any())
            {
                @foreach (var post in posts)
                {
                    // Create a default UserDto for the poster. 
                    // Adjust this mapping if your PostDto already includes a nested UserDto.
                    var defaultPoster = new UserDto(
                        post.ArtistId, 
                        post.ArtistName, 
                        string.Empty, 
                        "default-avatar.png", 
                        DateTime.MinValue,
                        "Artist"
                    );
                    <FeedItem 
                        Poster="@defaultPoster" 
                        Content="@("[POST] " + post.Description)" 
                        Comments="@(post.Comments ?? new List<CommentDto>())" />
                }
            }
            else
            {
                <p>No posts available.</p>
            }
        </div>
        <div class="mt-4">
            <h6>Statuses</h6>
            @if (statuses.Any())
            {
                @foreach (var status in statuses)
                {
                    var defaultPoster = new UserDto(
                        status.UserId, 
                        status.UserName, 
                        string.Empty, 
                        "default-avatar.png", 
                        DateTime.MinValue,
                        "Artist"
                    );
                    <FeedItem 
                        Poster="@defaultPoster" 
                        Content="@("[STATUS] " + status.Text)" 
                        Comments="@(status.Comments ?? new List<CommentDto>())" />
                }
            }
            else
            {
                <p>No statuses available.</p>
            }
        </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private List<PostDto>? posts;
    private List<StatusDto>? statuses;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Note: If you want only posts from the current user's following list,
            // replace GetAllPostsAsync with the appropriate service method.
            posts = await PostsService.GetAllPostsAsync();
            statuses = await StatusService.GetAllStatusesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }
}