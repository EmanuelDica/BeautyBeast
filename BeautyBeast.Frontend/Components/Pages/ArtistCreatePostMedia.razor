@page "/account/{id:int}/post/media"
@rendermode InteractiveServer
@namespace BeautyBeast.Frontend.Components.Dialogs
@using BeautyBeast.Frontend.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject Services.PostService PostService
@inject Services.UserService UserService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@if (user == null)
{
    <div class="alert alert-info mt-3">Loading post media...</div>
}
else if (userRole != "Artist")
{
    <div class="alert alert-danger mt-3">Access denied. Only artists can create media posts.</div>
}
else
{
    <h2>ðŸ“· Create Media Post</h2>

    <div class="mb-3">
        <label for="description" class="form-label">Post Description</label>
        <textarea class="form-control" id="description" @bind="Description" rows="3"></textarea>
    </div>

    <div class="mb-3">
        <InputFile OnChange="UploadFiles" multiple />
    </div>

    <ul class="mt-3 list-unstyled">
        @foreach (var url in uploadedFileUrls)
        {
            <li>
                <a href="@url" target="_blank">@url</a>
                <button class="btn btn-sm btn-danger ms-2" @onclick="() => RemoveMedia(url)">
                    Remove
                </button>
            </li>
        }
    </ul>

    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button class="btn btn-primary" @onclick="Submit">Upload</button>
}

@code {
    [Parameter] public int id { get; set; }
    private string Description { get; set; } = string.Empty;
    private List<string> uploadedFileUrls = new();
    private int ArtistId = 1;
    private UserDto? user;
    private string? userRole;

    protected override async Task OnInitializedAsync()
    {
        // Get current user and role from services
        user = await UserService.GetCurrentUserAsync();
        userRole = await UserService.GetUserRoleAsync();

        // If not logged in or not an artist, redirect to unauthorized.
        if (user == null || userRole != "Artist")
        {
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }

        ArtistId = user.Id;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);
            // For now, we use the file name as a placeholder URL.
            uploadedFileUrls.Add(file.Name);
        }
    }

    private void RemoveMedia(string url)
    {
        uploadedFileUrls.Remove(url);
    }

    private void Cancel()
    {
        // Navigate to the user's dashboard.
        NavigationManager.NavigateTo($"/dashboard/{id}");
    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(Description) && uploadedFileUrls.Count == 0)
        {
            Console.WriteLine("Cannot create an empty post.");
            return;
        }

        // Convert the list of URLs to a comma-separated string.
        var newPost = new CreatePostDto(Description, string.Join(",", uploadedFileUrls), ArtistId);
        var result = await PostService.CreatePostAsync(newPost);

        if (result)
        {
            Console.WriteLine("Post created successfully.");
            // After creation, navigate to the dashboard.
            NavigationManager.NavigateTo($"/dashboard/{id}");
        }
        else
        {
            Console.WriteLine("Failed to create post.");
        }
    }
}