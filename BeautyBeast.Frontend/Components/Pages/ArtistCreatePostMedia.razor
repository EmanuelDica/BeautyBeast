@page "/account/{id:int}/post/media"
@rendermode InteractiveServer
@namespace BeautyBeast.Frontend.Components.Dialogs
@using BeautyBeast.Frontend.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject Services.PostService PostService
@inject Services.UserService UserService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container mt-4">
    @if (!initialized)
    {
        <div class="alert alert-info mt-3">Loading post media...</div>
    }
    else
    {
    
    <h2>ðŸ“· Create Media Post</h2>

    <div class="mb-3">
        <label for="description" class="form-label">Post Description</label>
        <textarea class="form-control" id="description" @bind="Description" rows="3"></textarea>
    </div>

    <div class="mb-3">
        <InputFile OnChange="UploadFiles" multiple />
    </div>

    <ul class="mt-3 list-unstyled">
        @foreach (var url in uploadedFileUrls)
        {
            <li>
                <a href="@url" target="_blank">@url</a>
                <button class="btn btn-sm btn-danger ms-2" @onclick="() => RemoveMedia(url)">
                    Remove
                </button>
            </li>
        }
    </ul>

    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button class="btn btn-primary" @onclick="Submit">Upload</button>
    }
</div>
}

@code {
    [Parameter] public int id { get; set; }

    private string Description { get; set; } = string.Empty;
    private List<string> uploadedFileUrls = new();
    private string? userRole;
    private int userId;
    private bool initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            var currentUser = await UserService.GetCurrentUserAsync();

            if (currentUser == null)
            {
                NavigationManager.NavigateTo("/account/signin");
                return;
            }

            userId = currentUser.Id;
            userRole = currentUser.Role;

            if (string.IsNullOrEmpty(userRole) || userRole != "Artist")
            {
                NavigationManager.NavigateTo("/unauthorized");
                return;
            }

            initialized = true;
            StateHasChanged(); // trigger re-render with user data
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);
            uploadedFileUrls.Add(file.Name);
        }
    }

    private void RemoveMedia(string url)
    {
        uploadedFileUrls.Remove(url);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/dashboard/artist/{id}");
    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(Description) && uploadedFileUrls.Count == 0)
        {
            Console.WriteLine("Cannot create an empty post.");
            return;
        }

        var newPost = new CreatePostDto(Description, string.Join(",", uploadedFileUrls), userId);
        var result = await PostService.CreatePostAsync(newPost);

        if (result)
        {
            Console.WriteLine("Post created successfully.");
            NavigationManager.NavigateTo($"/dashboard/artist/{id}");
        }
        else
        {
            Console.WriteLine("Failed to create post.");
        }
    }
}
