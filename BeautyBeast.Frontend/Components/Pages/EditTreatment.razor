@page "/treatments/edit/{TreatmentId:int}"
@rendermode InteractiveServer
@inject Services.TreatmentService TreatmentService
@inject NavigationManager NavigationManager
@using BeautyBeast.Frontend.Dtos

<h2>✏️ Edit Treatment</h2>

@if (Treatment == null)
{
    <p>Loading treatment details...</p>
}
else
{
    <div class="mb-3">
        <label for="name" class="form-label">Treatment Name</label>
        <input type="text" class="form-control" id="name"
               value="@Treatment.Name"
               @oninput="e => Treatment.Name = e.Value?.ToString() ?? string.Empty" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea class="form-control" id="description" rows="3"
                  @oninput="e => Treatment.Description = e.Value?.ToString() ?? string.Empty">
                  @Treatment.Description
        </textarea>
    </div>

    <div class="mb-3">
        <label for="preCare" class="form-label">Pre-Care Instructions</label>
        <textarea class="form-control" id="preCare" rows="3"
                  @oninput="e => Treatment.PreCareInstructions = e.Value?.ToString() ?? string.Empty">
                  @Treatment.PreCareInstructions
        </textarea>
    </div>

    <div class="mb-3">
        <label for="afterCare" class="form-label">After-Care Instructions</label>
        <textarea class="form-control" id="afterCare" rows="3"
                  @oninput="e => Treatment.AfterCareInstructions = e.Value?.ToString() ?? string.Empty">
                  @Treatment.AfterCareInstructions
        </textarea>
    </div>

    <div class="mb-3">
        <label for="consentFormUrl" class="form-label">Consent Form URL</label>
        <input type="url" class="form-control" id="consentFormUrl"
               value="@Treatment.ConsentFormUrl"
               @oninput="e => Treatment.ConsentFormUrl = e.Value?.ToString() ?? string.Empty" />
    </div>

    <div class="mb-3">
        <label for="bookingDate" class="form-label">Booking Date</label>
        <input type="date" class="form-control" id="bookingDate"
               value="@BookingDateString"
               @onchange="ConvertBookingDate" />
    </div>

    <div class="mb-3">
        <label for="startTime" class="form-label">Start Time</label>
        <input type="time" class="form-control" id="startTime"
               value="@StartTimeString"
               @onchange="ConvertStartTime" />
    </div>

    <div class="mb-3">
        <label for="duration" class="form-label">Duration (Minutes)</label>
        <input type="number" class="form-control" id="duration"
               value="@DurationMinutes"
               @onchange="ConvertDuration" />
    </div>
    <button class="btn btn-warning" @onclick="() => EditTreatmentbutton(TreatmentId)">✏️ Edit</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button class="btn btn-primary" @onclick="Submit">Save Changes</button>
}

@code {
    [Parameter] public int TreatmentId { get; set; }
    private EditTreatmentDto? Treatment;
    private string BookingDateString => Treatment?.BookingDate.ToString("yyyy-MM-dd") ?? string.Empty;
    private string StartTimeString => Treatment?.StartTime.ToString("HH:mm") ?? string.Empty;
    private int DurationMinutes => (int)(Treatment?.Duration.TotalMinutes ?? 0);

    protected override async Task OnInitializedAsync()
    {
        var fetchedTreatment = await TreatmentService.GetTreatmentByIdAsync(TreatmentId);
        if (fetchedTreatment != null)
        {
            Treatment = new EditTreatmentDto(
                fetchedTreatment.Name,
                fetchedTreatment.Description,
                fetchedTreatment.PreCareInstructions,
                fetchedTreatment.AfterCareInstructions,
                fetchedTreatment.ConsentFormUrl,
                fetchedTreatment.BookingDate,
                fetchedTreatment.StartTime,
                fetchedTreatment.Duration,
                fetchedTreatment.ArtistId
            );
        }
    }

    private void ConvertBookingDate(ChangeEventArgs e)
{
    if (Treatment != null && DateOnly.TryParse(e.Value?.ToString(), out var date))
    {
        Treatment.BookingDate = date;
    }
}

    private void ConvertStartTime(ChangeEventArgs e)
{
    if (Treatment != null && TimeOnly.TryParse(e.Value?.ToString(), out var time))
    {
        Treatment.StartTime = time;
    }
}

    private void ConvertDuration(ChangeEventArgs e)
{
    if (Treatment != null && int.TryParse(e.Value?.ToString(), out var minutes))
    {
        Treatment.Duration = TimeSpan.FromMinutes(minutes);
    }
}

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task Submit()
    {
        if (Treatment == null) return;

        var result = await TreatmentService.UpdateTreatmentAsync(TreatmentId, Treatment);
        if (result)
        {
            Console.WriteLine("Treatment updated successfully.");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Failed to update treatment.");
        }
    }

    private void EditTreatmentbutton(int treatmentId)
    {
        NavigationManager.NavigateTo($"/treatments/edit/{treatmentId}");
    }
}