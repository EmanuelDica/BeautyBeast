@page "/users/post/edit/{PostId:int}"
@rendermode InteractiveServer
@namespace BeautyBeast.Frontend.Pages
@using BeautyBeast.Frontend.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject Services.PostService PostService
@inject NavigationManager NavigationManager

<h2>✏️ Edit Post</h2>

@if (post == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-3">
        <label for="description" class="form-label">Edit Description</label>
        <textarea class="form-control" id="description" @bind="post.Description" rows="3"></textarea>
    </div>

    <div class="mb-3">
        <label class="form-label">Media Files</label>
        <InputFile OnChange="UploadFiles" multiple />
    </div>

    <ul class="mt-3 list-unstyled">
        @if (post.MediaUrls != null)
        {
            @foreach (var url in post.MediaUrls)
            {
                <li><a href="@url" target="_blank">@url</a></li>
            }
        }
    </ul>

    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button class="btn btn-primary" @onclick="Submit">Save Changes</button>
}

@if (post != null)
{
    <button class="btn btn-outline-secondary mt-3" @onclick="NavigateToEditPost">
        ✏ Edit Post
    </button>
}

@code {
    [Parameter] public int PostId { get; set; }
    private EditPostDto post = new("", new List<string>());
    private List<string> uploadedFileUrls = new();

    protected override async Task OnInitializedAsync()
    {
        var fetchedPost = await PostService.GetPostByIdAsync(PostId);
        if (fetchedPost != null)
        {
            post = new EditPostDto(fetchedPost.Description, new List<string>(fetchedPost.MediaUrls ?? new List<string>()));
            uploadedFileUrls = new List<string>(post.MediaUrls ?? new List<string>());
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);

            uploadedFileUrls.Add(file.Name);
        }

        post = new EditPostDto(post.Description, new List<string>(uploadedFileUrls));
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task Submit()
    {
        if (post == null) return;

        var result = await PostService.UpdatePostAsync(PostId, post);

        if (result)
        {
            Console.WriteLine("Post updated successfully.");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Failed to update post.");
        }
    }

    private void NavigateToEditPost()
    {
        NavigationManager.NavigateTo($"/users/post/edit/{PostId}");
    }
}