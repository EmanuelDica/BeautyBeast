@page "/account/{id:int}/treatments/edit/{TreatmentId:int}"
@inject Services.TreatmentService TreatmentService
@inject Services.UserService UserService
@inject NavigationManager NavigationManager
@using BeautyBeast.Frontend.Dtos
@rendermode InteractiveServer

<div class="container mt-4">
    @if (user == null)
    {
        <div class="alert alert-info mt-3">Loading treatment details...</div>
    }
    else if (userRole != "Artist")
    {
        <div class="alert alert-danger mt-3">Access denied. Only artists can edit treatments.</div>
    }
    else
    {
        <h2>✏️ Edit Treatment</h2>

        <div class="mb-3">
            <label for="name" class="form-label">Treatment Name</label>
            <input type="text" class="form-control" id="name" @bind="Treatment!.Name" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" rows="3" @bind="Treatment.Description"></textarea>
        </div>

        <div class="mb-3">
            <label for="preCare" class="form-label">Pre-Care Instructions</label>
            <textarea class="form-control" id="preCare" rows="3" @bind="Treatment.PreCareInstructions"></textarea>
        </div>

        <div class="mb-3">
            <label for="afterCare" class="form-label">After-Care Instructions</label>
            <textarea class="form-control" id="afterCare" rows="3" @bind="Treatment.AfterCareInstructions"></textarea>
        </div>

        <div class="mb-3">
            <label for="consentFormUrl" class="form-label">Consent Form URL</label>
            <input type="url" class="form-control" id="consentFormUrl" @bind="Treatment.ConsentFormUrl" />
        </div>

        <div class="mb-3">
            <label for="bookingDate" class="form-label">Booking Date</label>
            <input type="date" class="form-control" id="bookingDate"
                   value="@BookingDateString"
                   @onchange="ConvertBookingDate" />
        </div>

        <div class="mb-3">
            <label for="startTime" class="form-label">Start Time</label>
            <input type="time" class="form-control" id="startTime"
                   value="@StartTimeString"
                   @onchange="ConvertStartTime" />
        </div>

        <div class="mb-3">
            <label for="duration" class="form-label">Duration (Minutes)</label>
            <input type="number" class="form-control" id="duration"
                   value="@DurationMinutes"
                   @onchange="ConvertDuration" />
        </div>

        <button class="btn btn-primary" @onclick="Submit">Save Changes</button>
        <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    }
</div>

@code {
    [Parameter] public int TreatmentId { get; set; }
    [Parameter] public int id { get; set; }
    private EditTreatmentDto? Treatment;
    private UserDto? user;
    private string? userRole;
    private string BookingDateString => Treatment?.BookingDate.ToString("yyyy-MM-dd") ?? string.Empty;
    private string StartTimeString => Treatment?.StartTime.ToString("HH:mm") ?? string.Empty;
    private int DurationMinutes => (int)(Treatment?.Duration.TotalMinutes ?? 0);

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the current user and role from the UserService.
        user = await UserService.GetCurrentUserAsync();
        userRole = await UserService.GetUserRoleAsync();

        // If the user is not an artist, redirect to the unauthorized page.
        if (user == null || userRole != "Artist")
        {
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }

        // Fetch the treatment details for editing.
        var fetchedTreatment = await TreatmentService.GetTreatmentByIdAsync(TreatmentId);
        if (fetchedTreatment != null)
        {
            Treatment = new EditTreatmentDto(
                fetchedTreatment.Name,
                fetchedTreatment.Description,
                fetchedTreatment.PreCareInstructions,
                fetchedTreatment.AfterCareInstructions,
                fetchedTreatment.ConsentFormUrl,
                fetchedTreatment.BookingDate,
                fetchedTreatment.StartTime,
                fetchedTreatment.Duration,
                fetchedTreatment.ArtistId
            );
        }
    }

    private void ConvertBookingDate(ChangeEventArgs e)
    {
        if (Treatment != null && DateOnly.TryParse(e.Value?.ToString(), out var date))
        {
            Treatment.BookingDate = date;
        }
    }

    private void ConvertStartTime(ChangeEventArgs e)
    {
        if (Treatment != null && TimeOnly.TryParse(e.Value?.ToString(), out var time))
        {
            Treatment.StartTime = time;
        }
    }

    private void ConvertDuration(ChangeEventArgs e)
    {
        if (Treatment != null && int.TryParse(e.Value?.ToString(), out var minutes))
        {
            Treatment.Duration = TimeSpan.FromMinutes(minutes);
        }
    }

    private void Cancel()
    {
        // Navigate to the treatments list page for this account.
        NavigationManager.NavigateTo($"/account/{id}/treatments");
    }

    private async Task Submit()
    {
        if (Treatment == null) return;

        var result = await TreatmentService.UpdateTreatmentAsync(TreatmentId, Treatment);
        if (result)
        {
            Console.WriteLine("Treatment updated successfully.");
            // After updating, navigate to the treatments list page.
            NavigationManager.NavigateTo($"/account/{id}/treatments");
        }
        else
        {
            Console.WriteLine("Failed to update treatment.");
        }
    }
}