@namespace BeautyBeast.Frontend.Components.Dialogs
@using BeautyBeast.Frontend.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject Services.PostService PostService
@inject HttpClient HttpClient
@inject IJSRuntime JS
<div class="modal fade" id="postMediaModal" tabindex="-1" aria-labelledby="postMediaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Media Post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <InputFile OnChange="UploadFiles" class="form-control" multiple accept=".png, .jpg, .jpeg, .gif" />
                <ul class="mt-3" style="list-style: none; padding-left: 0;">
                    @foreach (var url in uploadedFileUrls)
                    {
                        <li>
                            <a href="@url" target="_blank">@url</a>
                        </li>
                    }
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitAsync">Upload</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<string> uploadedFileUrls = new List<string>();
    private List<IBrowserFile> selectedFiles = new();

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
        uploadedFileUrls.Clear();

        foreach (var file in selectedFiles)
        {
            using var fileStream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // Max file size 10MB
            var formData = new MultipartFormDataContent
            {
                { new StreamContent(fileStream), "file", file.Name }
            };

            var response = await HttpClient.PostAsync("/Upload/upload", formData);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadResponse>();
                if (result != null)
                {
                    uploadedFileUrls.Add(result.Path);
                }
            }
            else
            {
                Console.WriteLine("File upload failed.");
            }
        }
    }

    private async Task SubmitAsync()
    {
        if (uploadedFileUrls.Any())
        {
            Console.WriteLine("Uploading post with media...");

            // Simulating an API call to save the media post
            var postData = new { MediaUrls = uploadedFileUrls };
            var response = await HttpClient.PostAsJsonAsync("/api/posts", postData);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Post successfully created!");
                uploadedFileUrls.Clear();
            }
            else
            {
                Console.WriteLine("Failed to create post.");
            }
        }
        else
        {
            Console.WriteLine("No media files uploaded.");
        }
    }

    private class UploadResponse
    {
        public string Path { get; set; } = string.Empty;
    }
}