@page "/account/signin"
@layout Layout.BlankLayout
@using BeautyBeastServer.Services
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email" @bind-Value="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" />
                <MudTextField T="string" Label="Password" @bind-Value="Password" InputType="InputType.Password" 
                              Required="true" RequiredError="Password is required!" />
                
                <MudButton OnClick="SignInUser" Variant="Variant.Filled" Disabled="@(!success)">Sign In</MudButton>
                 <div class="mt-4">
                    <MudText Typo="Typo.body1">Not a member? 
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Class="ml-1" OnClick="@(() => NavigationManager.NavigateTo("/signup"))">
                            Create account!
                        </MudButton>
                    </MudText>
                </div>
            </MudForm>
        </MudPaper>
        
        <MudPaper Class="pa-4 mt-4">
            <MudText Typo="Typo.subtitle2">Validation Errors</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudForm? form;
    private bool success;
    private string[] errors = { };

    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;

    private async Task SignInUser()
    {
        await form!.Validate();
        if (!success)
        {
            errors = new[] { "Please correct the errors in the form." };
            return;
        }

        try
        {
            var loginResult = await AuthenticationService.LoginAsync(Email, Password);
            if (loginResult)
            {
                Console.WriteLine("Sign-in successful!");
                NavigationManager.NavigateTo("/dashboard", true);
            }
            else
            {
                errors = new[] { "Invalid email or password." };
            }
        }
        catch (Exception ex)
        {
            errors = new[] { $"An error occurred: {ex.Message}" };
        }
    }
}
