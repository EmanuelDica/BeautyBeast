@page "/signin"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BeautyBeastApp.Models
@using BeautyBeastApp.Helpers

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                            Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                InputType="InputType.Password"
                                Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                RequiredError="Password is required!"/>
                <MudTextField T="string"
                                Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                Validation="@(new Func<string, string>(PasswordMatch))"/>
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                        <MudRadio Value="@("Client")">Client</MudRadio>
                        <MudRadio Value="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree To all Terms and Conditions!"  />
                    <MudButton Variant="Variant.Filled" Style="@($"background-color: {Colors.Teal.Darken3}; color: {Colors.Gray.Lighten5};")" 
                    DropShadow="false" Disabled="@(!success)" Class="ml-auto">
                    Register
                    </MudButton>
                </div>
            </MudForm>   
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Style="@($"background-color: {Colors.Teal.Darken3}; color: {Colors.Gray.Lighten5};")" 
            DropShadow="false" OnClick="@(()=>form!.Validate())">Validate</MudButton>

            <MudButton Variant="Variant.Filled" Style="@($"background-color: {Colors.Teal.Darken3}; color: {Colors.Gray.Lighten5};")" 
            DropShadow="false" OnClick="@(()=>form!.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>form!.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    bool AcceptedTerms = false;
    string[] errors = { };
    MudTextField<string>? pwField1;
    MudForm? form;

    // Form fields
    private string FirstName { get; set; } = string.Empty;
    private string Surname { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string AccountType { get; set; } = "Client"; // Default type is Client
    private string Bio { get; set; } = string.Empty;

    // List of created users (for testing purposes)
    private List<User> RegisteredUsers = new();

    private void SubmitForm()
    {
        if (!success)
        {
            errors = new[] { "Please fill out the form correctly!" };
            return;
        }

        // Password hashing
        string salt = PasswordHelper.GenerateSalt();
        string hashedPassword = PasswordHelper.HashPassword(Password, salt);

        User newUser;

        if (AccountType == "Professional")
        {
            newUser = new Artist
            {
                FullName = $"{FirstName} {Surname}",
                Email = Email,
                PasswordHash = hashedPassword,
                PasswordSalt = salt,
                Bio = Bio
            };
        }
        else
        {
            newUser = new Client
            {
                FullName = $"{FirstName} {Surname}",
                Email = Email,
                PasswordHash = hashedPassword,
                PasswordSalt = salt
            };
        }

        // Add to in-memory user list
        RegisteredUsers.Add(newUser);

        // Clear the form after registration
        form!.ResetAsync();
        success = false;
        AcceptedTerms = false;

        Console.WriteLine($"User {newUser.FullName} registered successfully as {AccountType}!");
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1!.Value != arg)
            return "Passwords don't match";
        return null!;
    }
}