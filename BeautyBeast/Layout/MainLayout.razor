@inherits LayoutComponentBase
@inject IDialogService DialogService
@using BeautyBeastApp.Dialogs

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Style="@($"background-color: {Colors.Teal.Darken2}")">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudMenu Icon="@Icons.Material.Outlined.Camera" Color="Color.Inherit">
            <MudMenuItem OnClick="@ShowStatusPostDialog">Status</MudMenuItem>
            <MudMenuItem OnClick="@ShowMediaPostDialog">Media</MudMenuItem>
        </MudMenu>
        <MudText Typo="Typo.h5" Class="mt-1">BeautyBeast</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Users Name</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @*Body*@
    </MudMainContent>
</MudLayout>
<MudDialogProvider/>

@code {
    bool _drawerOpen = true;     // For toggling the side navigation drawer
    bool _postOpen = false;      // Determines if the post overlay is visible
    string PostType = string.Empty; // Stores the selected post type (status or media)
    string PostContent = string.Empty; // The text content for status posts

    // Function to toggle the navigation drawer
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    // Function to show the dialog for a Status post
    private Task ShowStatusPostDialog()
    {
     var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large };
        return DialogService.ShowAsync<PostStatusDialog>("Create Status Post", options);
    }

    // Function to show the dialog for a Media post
    private Task ShowMediaPostDialog()
    {
      var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large };
        return DialogService.ShowAsync<PostMediaDialog>("Create Media Post", options);
    }

    void PostToggle()
    {
        _postOpen = !_postOpen;
    }
}