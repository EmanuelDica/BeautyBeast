// <auto-generated />
using System;
using BeautyBeastApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyBeastApi.Data.Migrations
{
    [DbContext(typeof(BeautyBeastContext))]
    [Migration("20250214184730_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("ArtistAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Achievement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistAchievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Achievement = "PMU Certification",
                            ArtistId = 1
                        },
                        new
                        {
                            Id = 2,
                            Achievement = "Bridal Makeup Specialist",
                            ArtistId = 1
                        },
                        new
                        {
                            Id = 3,
                            Achievement = "Master Stylist",
                            ArtistId = 2
                        },
                        new
                        {
                            Id = 4,
                            Achievement = "Color Correction Expert",
                            ArtistId = 2
                        },
                        new
                        {
                            Id = 5,
                            Achievement = "Skin Care Specialist",
                            ArtistId = 3
                        },
                        new
                        {
                            Id = 6,
                            Achievement = "Hydrafacial Expert",
                            ArtistId = 3
                        },
                        new
                        {
                            Id = 7,
                            Achievement = "Permanent Makeup Trainer",
                            ArtistId = 4
                        },
                        new
                        {
                            Id = 8,
                            Achievement = "Aesthetic Specialist",
                            ArtistId = 4
                        });
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingDateAndTime = new DateTime(2024, 3, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ClientId = 5,
                            Status = "Pending",
                            TreatmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingDateAndTime = new DateTime(2024, 3, 12, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            ClientId = 6,
                            Status = "Pending",
                            TreatmentId = 4
                        });
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TheComment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("StatusId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("MediaUrls")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            DatePosted = new DateTime(2024, 2, 20, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "My first PMU work!",
                            Likes = 0,
                            MediaUrls = "[\"pmu-work.jpg\"]"
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 2,
                            DatePosted = new DateTime(2024, 2, 21, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chiaroscuro masterpiece!",
                            Likes = 0,
                            MediaUrls = "[\"chiaroscuro.jpg\"]"
                        });
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("TEXT");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AfterCareInstructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConsentFormUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreCareInstructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AfterCareInstructions = "Follow aftercare card",
                            ArtistId = 1,
                            ConsentFormUrl = "microblading-consent.pdf",
                            Description = "Semi-permanent eyebrows",
                            Name = "Microblading",
                            PreCareInstructions = "Avoid caffeine"
                        },
                        new
                        {
                            Id = 2,
                            AfterCareInstructions = "Moisturize daily",
                            ArtistId = 1,
                            ConsentFormUrl = "ombre-brows-consent.pdf",
                            Description = "Powdered shading brows",
                            Name = "Ombre Brows",
                            PreCareInstructions = "No makeup before session"
                        },
                        new
                        {
                            Id = 3,
                            AfterCareInstructions = "Use oil-free remover",
                            ArtistId = 2,
                            ConsentFormUrl = "bridal-consent.pdf",
                            Description = "Full bridal makeup",
                            Name = "Bridal Makeup",
                            PreCareInstructions = "Clean face before"
                        },
                        new
                        {
                            Id = 4,
                            AfterCareInstructions = "Use gentle remover",
                            ArtistId = 2,
                            ConsentFormUrl = "evening-makeup-consent.pdf",
                            Description = "Makeup for special occasions",
                            Name = "Evening Glam Makeup",
                            PreCareInstructions = "Moisturize before"
                        });
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("FollowersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FollowingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FollowersId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Artist", b =>
                {
                    b.HasBaseType("BeautyBeastApi.Entities.User");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Artist");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "leavinci@gmail.com",
                            FullName = "Lea Vinci",
                            ProfilePictureUrl = "lea.jpg",
                            Bio = "Master of PMU"
                        },
                        new
                        {
                            Id = 2,
                            Email = "rachelhertz@gmail.com",
                            FullName = "Rachel Hertzler",
                            ProfilePictureUrl = "rachel.jpg",
                            Bio = "Make-up Artist"
                        },
                        new
                        {
                            Id = 3,
                            Email = "vivas@gmail.com",
                            FullName = "Vivian A",
                            ProfilePictureUrl = "viv.jpg",
                            Bio = "Hairdresser"
                        },
                        new
                        {
                            Id = 4,
                            Email = "fridaleon@gmail.com",
                            FullName = "Frida Leon",
                            ProfilePictureUrl = "frida.jpg",
                            Bio = "Aesthetician"
                        });
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Client", b =>
                {
                    b.HasBaseType("BeautyBeastApi.Entities.User");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Email = "johndoe@gmail.com",
                            FullName = "John Doe",
                            ProfilePictureUrl = "john.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Email = "emma@gmail.com",
                            FullName = "Emma Watson",
                            ProfilePictureUrl = "emma.jpg"
                        });
                });

            modelBuilder.Entity("ArtistAchievement", b =>
                {
                    b.HasOne("BeautyBeastApi.Entities.Artist", "Artist")
                        .WithMany("Achievements")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Booking", b =>
                {
                    b.HasOne("BeautyBeastApi.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyBeastApi.Entities.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Comment", b =>
                {
                    b.HasOne("BeautyBeastApi.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyBeastApi.Entities.Status", null)
                        .WithMany("Comments")
                        .HasForeignKey("StatusId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Post", b =>
                {
                    b.HasOne("BeautyBeastApi.Entities.Artist", "Artist")
                        .WithMany("Posts")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Status", b =>
                {
                    b.HasOne("BeautyBeastApi.Entities.Client", null)
                        .WithMany("Statuses")
                        .HasForeignKey("ClientId");

                    b.HasOne("BeautyBeastApi.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Treatment", b =>
                {
                    b.HasOne("BeautyBeastApi.Entities.Artist", "Artist")
                        .WithMany("Treatments")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("BeautyBeastApi.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyBeastApi.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Status", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Artist", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Posts");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("BeautyBeastApi.Entities.Client", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Statuses");
                });
#pragma warning restore 612, 618
        }
    }
}
