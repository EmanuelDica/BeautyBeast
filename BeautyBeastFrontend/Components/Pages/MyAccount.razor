@page "/profile/{UserId:int}"
@inject NavigationManager NavigationManager
@inject Services.UserService UserService
@inject Services.ClientService ClientService
@inject Services.ArtistService ArtistService
@inject Services.PostService PostService
@using BeautyBeastFrontend.Dtos

<MudPaper Class="pa-4">
    @if (user == null)
    {
        <MudText Typo="Typo.h5">Loading profile...</MudText>
    }
    else
    {
        <MudText Typo="Typo.h5">Profile: @user.FullName (@user.Email)</MudText>

        @if (isArtist)
        {
            <MudText Typo="Typo.h6" Class="mt-4">Achievements:</MudText>
            <MudList T="ArtistAchievementDto">
                @foreach (var achievement in artistAchievements)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Star">@achievement.Achievement</MudListItem>
                }
            </MudList>

            <MudButton Variant="Variant.Filled" Class="mt-2" OnClick="@NavigateToManageTreatments">
                Manage Treatments
            </MudButton>
        }
        else if (isClient)
        {
            <MudButton Variant="Variant.Filled" Class="mt-2" OnClick="@NavigateToMyBookings">
                View My Bookings
            </MudButton>
        }

        <MudText Typo="Typo.h6" Class="mt-4">Posts:</MudText>
        @foreach (var post in posts)
        {
            <MudCard Class="ma-2">
                <MudCardContent>
                    <MudText Typo="Typo.body1">@($"[{(post.MediaUrls.Any() ? "MEDIA" : "STATUS")}] {post.Description}")</MudText>
                </MudCardContent>
            </MudCard>
        }
    }
</MudPaper>

@code {
        [Parameter] public int UserId { get; set; }
        private UserDto? user;
        private List<PostDto> posts = new();
        private List<ArtistAchievementDto> artistAchievements = new();
        private bool isArtist = false;
        private bool isClient = false;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                user = await UserService.GetUserByIdAsync(UserId);
                posts = await PostService.GetPostsByUserIdAsync(UserId);

                if (await ArtistService.IsArtistAsync(UserId))
                {
                    isArtist = true;
                    artistAchievements = await ArtistService.GetAchievementsByArtistIdAsync(UserId);
                }
                else if (await ClientService.IsClientAsync(UserId))
                {
                    isClient = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading profile: {ex.Message}");
            }
        }

        @inject NavigationManager NavigationManager

        private void NavigateToManageTreatments()
        {
            NavigationManager.NavigateTo($"/treatments/manage/{UserId}");
        }

        private void NavigateToMyBookings()
        {
            NavigationManager.NavigateTo($"/mybookings/{UserId}");
        }
    }
}